import threading
import time
import random
from threading import Semaphore, Event

# Semaphore for controlling access to the shared resource
rw_mutex = Semaphore(1)   # Writers have exclusive access
mutex = Semaphore(1)      # Semaphore for reader counter
read_count = 0            # Number of readers accessing the resource

# Stop event to control when threads should stop
stop_event = Event()

def reader(id):
    global read_count
    while not stop_event.is_set():  # Check if we should stop
        # Reader wants to enter
        mutex.acquire()
        read_count += 1
        if read_count == 1:
            rw_mutex.acquire()  # First reader locks the resource
        mutex.release()

        # Reading section (Critical section for readers)
        print(f"Reader {id} is reading...")
        time.sleep(random.uniform(0.5, 2))  # Simulating reading time

        # Reader is leaving
        mutex.acquire()
        read_count -= 1
        if read_count == 0:
            rw_mutex.release()  # Last reader unlocks the resource
        mutex.release()

        # Simulate some idle time before reading again
        time.sleep(random.uniform(0.5, 2))

def writer(id):
    while not stop_event.is_set():  # Check if we should stop
        # Writer wants to enter
        rw_mutex.acquire()  # Writers get exclusive access

        # Writing section (Critical section for writers)
        print(f"Writer {id} is writing...")
        time.sleep(random.uniform(1, 3))  # Simulating writing time

        # Writer is leaving
        rw_mutex.release()

        # Simulate some idle time before writing again
        time.sleep(random.uniform(1, 3))

# Creating reader and writer threads
readers = [threading.Thread(target=reader, args=(i,)) for i in range(3)]
writers = [threading.Thread(target=writer, args=(i,)) for i in range(2)]

# Starting all threads
for r in readers:
    r.start()

for w in writers:
    w.start()

# Run the threads for a set duration (e.g., 10 seconds)
time.sleep(10)

# Signal all threads to stop
stop_event.set()

# Join threads to wait for them to finish
for r in readers:
    r.join()

for w in writers:
    w.join()

print("All threads have stopped.")
